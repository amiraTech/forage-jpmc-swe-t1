From 35dfd52598c51f127fec4983f3eb33e53b9945b3 Mon Sep 17 00:00:00 2001
From: amiraTech <rivercrayon@gmail.com>
Date: Wed, 6 Sep 2023 19:35:05 +0100
Subject: [PATCH] Implemented code to process stock market data.

---
 client3.py | 70 ++++++++++++++++++++++++++++++++++++++++++++----------
 1 file changed, 58 insertions(+), 12 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..f451240 100644
--- a/client3.py
+++ b/client3.py
@@ -18,42 +18,88 @@
 #  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 #  DEALINGS IN THE SOFTWARE.
 
+
+# Declaring the variables 
 import json
 import random
 import urllib.request
+import time
 
 # Server API URLs
-QUERY = "http://localhost:8080/query?id={}"
+QUERY = "http://localhost:8080/query?id={}" 
 
 # 500 server request
 N = 500
 
+# Stock A and Stock B - this defines 2 empty lists and store data for 2 correlated stocks
+stockA_data = []
+stockB_data = []
+
+# This stores the stock information
+stock_info = []
+
+
 
 def getDataPoint(quote):
-    """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2 # Calculate the average number
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
-    """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        return 0
+    return price_a / price_b
 
 
 # Main
 if __name__ == "__main__":
-    # Query the price once every N seconds.
-    for _ in iter(range(N)):
+    while True:
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
-        """ ----------- Update to get the ratio --------------- """
+        # Iterate through the quotes and collect data for two correlated stocks (e.g., Stock A and Stock B)
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
-            print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+           # Check if the stock is in the dictionary
+            if stock not in stock_info:
+                stock_info[stock] = {
+                    'bid_prices' :[],
+                    'ask_prices' :[],
+                    'prices' :[],
+                    'ratios' :[],
+                }
+
+            stock_info[stock]['bid_prices'].append(bid_price)
+            stock_info[stock]['ask_prices'].append(ask_price)
+            stock_info[stock]['prices'].append(price)
+  
+            # Decides which stock is Stock A and which is Stock B
+            if stock == 'STOCK_A':
+                stockA_data.append(price)
+            elif stock == 'STOCK_B':
+                stockB_data.append(price)
+
+        # Calculate the ratio 
+        if len(stockA_data) > 0 and len(stockB_data) > 0:
+            last_price_A = stockA_data[-1]
+            last_price_B = stockB_data[-1]
+            ratio = getRatio(last_price_A, last_price_B)
+            stock_info[stock]['ratios'].append(ratio)
+
+            # Print the ratio and any other relevant information
+            print(f"Ratio: {ratio}")
+            print(f"Stock: {stock}")
+            print(f"Bid Price: {bid_price}")
+            print(f"Ask Price: {ask_price}")
+            print(f"Price: {price}")
+            print(f"Ratio: {ratio}")
+        
+        # Sleep for a while before making the next request (adjust the sleep time as needed)
+        time.sleep(10)  
+
+        # Print the stock information
+        print("Stock Information")
+        print(stock_info)
-- 
2.42.0.windows.2

